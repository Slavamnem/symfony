security:
    encoders:
        App\Entity\User:
            algorithm: bcrypt
        Symfony\Component\Security\Core\User\User: plaintext
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        in_memory:
            memory:
                users:
                    admin:
                        password: "1111"
                        roles: 'ROLE_ADMIN'
        app_user_provider:
            entity:
                class: App\Entity\User
                property: login
        api_app_user_provider:
            entity:
                class: App\Entity\User
                property: accessToken
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            pattern: ^/(?!(swagger|corezoid|base|api|pub|file|soap|pub-guard))
            anonymous: true
            provider: app_user_provider
            guard:
                authenticators:
                    - App\Security\LoginFormAuthenticator
            logout:
                path: app_logout
                target: /
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate

            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html

        base:
            pattern: ^/(base)
            provider: in_memory
            anonymous: false
            stateless: true
            http_basic: ~

        api_login:
            pattern: ^/api/auth/login
            stateless: true
            anonymous: true
            json_login:
                provider: app_user_provider
                check_path: /api/auth/login
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            provider: app_user_provider

        api:
            pattern: ^/(api)
            provider: app_user_provider
            guard:
                authenticators:
                    #                    - App\Security\TokenAuthenticator
                    - lexik_jwt_authentication.jwt_token_authenticator
            anonymous: false
            stateless: true
            http_basic: ~

    role_hierarchy:
        ROLE_ADMIN: ROLE_USER
        ROLE_SUPER_ADMIN: [ ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH ]

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/test, roles: ROLE_USER }
        - { path: ^/api/auth/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/base/first, roles: ROLE_SUPERADMIN }
        # - { path: ^/admin, roles: ROLE_ADMIN } # плюс действует на все подкаталоги
        # - { path: ^/profile, roles: ROLE_USER }
